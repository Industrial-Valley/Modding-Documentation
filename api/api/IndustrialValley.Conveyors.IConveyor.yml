### YamlMime:ManagedReference
items:
- uid: IndustrialValley.Conveyors.IConveyor
  commentId: T:IndustrialValley.Conveyors.IConveyor
  id: IConveyor
  parent: IndustrialValley.Conveyors
  children:
  - IndustrialValley.Conveyors.IConveyor.CanAcceptItem(IndustrialValley.Conveyors.ConveyorItem)
  - IndustrialValley.Conveyors.IConveyor.GetInputPositions
  - IndustrialValley.Conveyors.IConveyor.GetOutputPositions
  - IndustrialValley.Conveyors.IConveyor.InsertItem(IndustrialValley.Conveyors.ConveyorItem)
  langs:
  - csharp
  - vb
  name: IConveyor
  nameWithType: IConveyor
  fullName: IndustrialValley.Conveyors.IConveyor
  type: Interface
  source:
    id: IConveyor
    path: F:\Unity Games\Industrial Valley\Industrial Valley\Assets\IndustrialValley\Scripts\Conveyors\IConveyor.cs
    startLine: 5
  assemblies:
  - IndustrialValley
  namespace: IndustrialValley.Conveyors
  syntax:
    content: public interface IConveyor
    content.vb: Public Interface IConveyor
- uid: IndustrialValley.Conveyors.IConveyor.CanAcceptItem(IndustrialValley.Conveyors.ConveyorItem)
  commentId: M:IndustrialValley.Conveyors.IConveyor.CanAcceptItem(IndustrialValley.Conveyors.ConveyorItem)
  id: CanAcceptItem(IndustrialValley.Conveyors.ConveyorItem)
  parent: IndustrialValley.Conveyors.IConveyor
  langs:
  - csharp
  - vb
  name: CanAcceptItem(ConveyorItem)
  nameWithType: IConveyor.CanAcceptItem(ConveyorItem)
  fullName: IndustrialValley.Conveyors.IConveyor.CanAcceptItem(IndustrialValley.Conveyors.ConveyorItem)
  type: Method
  source:
    id: CanAcceptItem
    path: F:\Unity Games\Industrial Valley\Industrial Valley\Assets\IndustrialValley\Scripts\Conveyors\IConveyor.cs
    startLine: 10
  assemblies:
  - IndustrialValley
  namespace: IndustrialValley.Conveyors
  summary: Return true if this conveyor/machine has room to accept one more ConveyorItem.
  example: []
  syntax:
    content: bool CanAcceptItem(ConveyorItem item)
    parameters:
    - id: item
      type: IndustrialValley.Conveyors.ConveyorItem
    return:
      type: System.Boolean
    content.vb: Function CanAcceptItem(item As ConveyorItem) As Boolean
  overload: IndustrialValley.Conveyors.IConveyor.CanAcceptItem*
- uid: IndustrialValley.Conveyors.IConveyor.InsertItem(IndustrialValley.Conveyors.ConveyorItem)
  commentId: M:IndustrialValley.Conveyors.IConveyor.InsertItem(IndustrialValley.Conveyors.ConveyorItem)
  id: InsertItem(IndustrialValley.Conveyors.ConveyorItem)
  parent: IndustrialValley.Conveyors.IConveyor
  langs:
  - csharp
  - vb
  name: InsertItem(ConveyorItem)
  nameWithType: IConveyor.InsertItem(ConveyorItem)
  fullName: IndustrialValley.Conveyors.IConveyor.InsertItem(IndustrialValley.Conveyors.ConveyorItem)
  type: Method
  source:
    id: InsertItem
    path: F:\Unity Games\Industrial Valley\Industrial Valley\Assets\IndustrialValley\Scripts\Conveyors\IConveyor.cs
    startLine: 17
  assemblies:
  - IndustrialValley
  namespace: IndustrialValley.Conveyors
  summary: >-
    Insert a new ConveyorItem onto this conveyor/machine.  The implementing class

    should position the item’s visual at its “input” and begin moving/processing it.
  example: []
  syntax:
    content: void InsertItem(ConveyorItem item)
    parameters:
    - id: item
      type: IndustrialValley.Conveyors.ConveyorItem
      description: The ConveyorItem (including its prefab) to place here.
    content.vb: Sub InsertItem(item As ConveyorItem)
  overload: IndustrialValley.Conveyors.IConveyor.InsertItem*
- uid: IndustrialValley.Conveyors.IConveyor.GetInputPositions
  commentId: M:IndustrialValley.Conveyors.IConveyor.GetInputPositions
  id: GetInputPositions
  parent: IndustrialValley.Conveyors.IConveyor
  langs:
  - csharp
  - vb
  name: GetInputPositions()
  nameWithType: IConveyor.GetInputPositions()
  fullName: IndustrialValley.Conveyors.IConveyor.GetInputPositions()
  type: Method
  source:
    id: GetInputPositions
    path: F:\Unity Games\Industrial Valley\Industrial Valley\Assets\IndustrialValley\Scripts\Conveyors\IConveyor.cs
    startLine: 22
  assemblies:
  - IndustrialValley
  namespace: IndustrialValley.Conveyors
  summary: Return all world‐space positions where this conveyor/machine should accept items.
  example: []
  syntax:
    content: List<Vector3> GetInputPositions()
    return:
      type: System.Collections.Generic.List{UnityEngine.Vector3}
    content.vb: Function GetInputPositions() As List(Of Vector3)
  overload: IndustrialValley.Conveyors.IConveyor.GetInputPositions*
- uid: IndustrialValley.Conveyors.IConveyor.GetOutputPositions
  commentId: M:IndustrialValley.Conveyors.IConveyor.GetOutputPositions
  id: GetOutputPositions
  parent: IndustrialValley.Conveyors.IConveyor
  langs:
  - csharp
  - vb
  name: GetOutputPositions()
  nameWithType: IConveyor.GetOutputPositions()
  fullName: IndustrialValley.Conveyors.IConveyor.GetOutputPositions()
  type: Method
  source:
    id: GetOutputPositions
    path: F:\Unity Games\Industrial Valley\Industrial Valley\Assets\IndustrialValley\Scripts\Conveyors\IConveyor.cs
    startLine: 27
  assemblies:
  - IndustrialValley
  namespace: IndustrialValley.Conveyors
  summary: Return all world‐space positions where this conveyor/machine should output items.
  example: []
  syntax:
    content: List<Vector3> GetOutputPositions()
    return:
      type: System.Collections.Generic.List{UnityEngine.Vector3}
    content.vb: Function GetOutputPositions() As List(Of Vector3)
  overload: IndustrialValley.Conveyors.IConveyor.GetOutputPositions*
references:
- uid: IndustrialValley.Conveyors
  commentId: N:IndustrialValley.Conveyors
  href: IndustrialValley.html
  name: IndustrialValley.Conveyors
  nameWithType: IndustrialValley.Conveyors
  fullName: IndustrialValley.Conveyors
  spec.csharp:
  - uid: IndustrialValley
    name: IndustrialValley
    href: IndustrialValley.html
  - name: .
  - uid: IndustrialValley.Conveyors
    name: Conveyors
    href: IndustrialValley.Conveyors.html
  spec.vb:
  - uid: IndustrialValley
    name: IndustrialValley
    href: IndustrialValley.html
  - name: .
  - uid: IndustrialValley.Conveyors
    name: Conveyors
    href: IndustrialValley.Conveyors.html
- uid: IndustrialValley.Conveyors.IConveyor.CanAcceptItem*
  commentId: Overload:IndustrialValley.Conveyors.IConveyor.CanAcceptItem
  href: IndustrialValley.Conveyors.IConveyor.CanAcceptItem.html#IndustrialValley_Conveyors_IConveyor_CanAcceptItem_IndustrialValley_Conveyors_ConveyorItem_
  name: CanAcceptItem
  nameWithType: IConveyor.CanAcceptItem
  fullName: IndustrialValley.Conveyors.IConveyor.CanAcceptItem
- uid: IndustrialValley.Conveyors.ConveyorItem
  commentId: T:IndustrialValley.Conveyors.ConveyorItem
  parent: IndustrialValley.Conveyors
  href: IndustrialValley.Conveyors.ConveyorItem.html
  name: ConveyorItem
  nameWithType: ConveyorItem
  fullName: IndustrialValley.Conveyors.ConveyorItem
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.boolean
  name: bool
  nameWithType: bool
  fullName: bool
  nameWithType.vb: Boolean
  fullName.vb: Boolean
  name.vb: Boolean
- uid: System
  commentId: N:System
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System
  nameWithType: System
  fullName: System
- uid: IndustrialValley.Conveyors.IConveyor.InsertItem*
  commentId: Overload:IndustrialValley.Conveyors.IConveyor.InsertItem
  href: IndustrialValley.Conveyors.IConveyor.InsertItem.html#IndustrialValley_Conveyors_IConveyor_InsertItem_IndustrialValley_Conveyors_ConveyorItem_
  name: InsertItem
  nameWithType: IConveyor.InsertItem
  fullName: IndustrialValley.Conveyors.IConveyor.InsertItem
- uid: IndustrialValley.Conveyors.IConveyor.GetInputPositions*
  commentId: Overload:IndustrialValley.Conveyors.IConveyor.GetInputPositions
  href: IndustrialValley.Conveyors.IConveyor.GetInputPositions.html#IndustrialValley_Conveyors_IConveyor_GetInputPositions
  name: GetInputPositions
  nameWithType: IConveyor.GetInputPositions
  fullName: IndustrialValley.Conveyors.IConveyor.GetInputPositions
- uid: System.Collections.Generic.List{UnityEngine.Vector3}
  commentId: T:System.Collections.Generic.List{UnityEngine.Vector3}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.List`1
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<Vector3>
  nameWithType: List<Vector3>
  fullName: System.Collections.Generic.List<UnityEngine.Vector3>
  nameWithType.vb: List(Of Vector3)
  fullName.vb: System.Collections.Generic.List(Of UnityEngine.Vector3)
  name.vb: List(Of Vector3)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - uid: UnityEngine.Vector3
    name: Vector3
    isExternal: true
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - uid: UnityEngine.Vector3
    name: Vector3
    isExternal: true
  - name: )
- uid: System.Collections.Generic.List`1
  commentId: T:System.Collections.Generic.List`1
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  name: List<T>
  nameWithType: List<T>
  fullName: System.Collections.Generic.List<T>
  nameWithType.vb: List(Of T)
  fullName.vb: System.Collections.Generic.List(Of T)
  name.vb: List(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: <
  - name: T
  - name: '>'
  spec.vb:
  - uid: System.Collections.Generic.List`1
    name: List
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic.list-1
  - name: (
  - name: Of
  - name: " "
  - name: T
  - name: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  href: https://learn.microsoft.com/dotnet/api/system
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
  spec.csharp:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
  spec.vb:
  - uid: System
    name: System
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system
  - name: .
  - uid: System.Collections
    name: Collections
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections
  - name: .
  - uid: System.Collections.Generic
    name: Generic
    isExternal: true
    href: https://learn.microsoft.com/dotnet/api/system.collections.generic
- uid: IndustrialValley.Conveyors.IConveyor.GetOutputPositions*
  commentId: Overload:IndustrialValley.Conveyors.IConveyor.GetOutputPositions
  href: IndustrialValley.Conveyors.IConveyor.GetOutputPositions.html#IndustrialValley_Conveyors_IConveyor_GetOutputPositions
  name: GetOutputPositions
  nameWithType: IConveyor.GetOutputPositions
  fullName: IndustrialValley.Conveyors.IConveyor.GetOutputPositions
memberLayout: SeparatePages
